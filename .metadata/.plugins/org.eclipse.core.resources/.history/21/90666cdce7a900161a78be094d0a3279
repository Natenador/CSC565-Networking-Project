package client_side;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;
import java.util.Date;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

import base.HouseHubConnection;
import base.HouseHubConnectionInterface;
import test.Device;

public class ControllerConnection extends HouseHubConnection{
	
	
	private String hostName;
	//Socket controllerSocket;
	DataOutputStream toServer;
	DataInputStream fromServer;
	Queue<String> messagesFromServer = new LinkedBlockingQueue<String>();
	
	public ControllerConnection() {
		connected = false;
	}

	/*public void send(String message) throws IOException {
		System.out.println("Trying to send '" + message + "' to the app");
		toServer = new DataOutputStream(controllerSocket.getOutputStream());
		toServer.writeUTF(message);
	}
	
	public void read() throws IOException {
		fromServer = new DataInputStream(controllerSocket.getInputStream());
		if(fromServer.available() > 0) {
			messagesFromServer.add(fromServer.readUTF());
		}
	}*/

	public int connectTo(Device device) {
		setHostName(device.getIpAddress());
		setSocketNumber(device.getPortNumber());
		setId(CURRENT_ID++);
		try {
			String messageToServer = "";
			while(!messageToServer.equals("quit") && connected) {  //Send and receive message until transaction is complete
				Socket client = new Socket(hostName, socketNumber);  //create connection with server
				DataOutputStream out = new DataOutputStream(client.getOutputStream());  
				BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
				System.out.println("Enter a message:");
				messageToServer = reader.readLine();
				out.writeUTF(messageToServer);  //send parameters to server for calculations
				DataInputStream in = new DataInputStream(client.getInputStream()); //listen for server input
				
				System.out.println(in.readUTF());
				client.close();
			}
			disconnect();

		}
		catch(IOException e) {
			System.out.println("Could not connect to " + hostName);
			e.printStackTrace();
		}
		return id;
	}
	/*
	@Override
	public void disconnect() throws IOException {
		super.disconnect();
		controllerThread.disconnect();
		toServer.close();
		fromServer.close();
		controllerSocket.close();
	}*/
	
	public String getRecentMessage() {
		String message = "There are no recent messages from the client.";
		if(!messagesFromServer.isEmpty()) {
			message =  messagesFromServer.remove();
		}
		return message;
	}
	
	public boolean hasMessage() {
		return !messagesFromServer.isEmpty();
	}
	
	public String getHostName() {
		return hostName;
	}

	public void setHostName(String hostName) {
		this.hostName = hostName;
	}

	public static void main(String[] args) throws IOException {
		Device device = new Device("Test Device");
		device.setIpAddress("localhost");
		device.setPortNumber(13000);
		
		ControllerConnection controller = new ControllerConnection();
		controller.connectTo(device);
	}
}
